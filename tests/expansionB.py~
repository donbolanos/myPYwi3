#
'''
This script write in txt files the potential map in order to keep all in a unique folder
'''
#
import sys
import os
import numpy as np
from scipy import signal
import matplotlib.pyplot as plt
#
# .. add the path ---> from Roch
#sys.path.append("/home/roch/code/mypywi/runs")
#sys.path.append("/home/roch/code/mypywi/shapes")
#sys.path.append("/home/roch/code/mypywi/draws")
#
# .. import the modulus
import runs.heckle  as heckle
import shapes.field as field
import draws.colp   as colp
#
# .. load the run
path = '/media/sbolanos/BatDRIVE/HECKLE/400x400_ohs/'#'/media/sbolanos/TOURO/HECKLE/270x540_ths/t_8-38/'
name = '1hs'

liste =os.listdir(path)

t  = []
d  = []

for folder in liste :

  if folder[0:len(name)] == name :
    
    run  = heckle.Heckle(path + folder, name)
    #
    # .. get the desired data giving time
    #data = run.GetN(time, "a")
    goodtime,grouptime = run.getTimeGroups([0,100])
    for time in goodtime :
      if not time in t :
        #dutu = run.fourierFlux(time)
        datax = run.GetB(time)[...,0]
        datay = run.GetB(time)[...,1]
        #
        # .. set the needed parameter to plot the 2d field
        domain    = None
        shifts    = [0, 0]
        bounds    = None
        colormap  = ['jet', 64]
        flines    = 10
        ticks     = [20, 20]
        subticks  = [2, 2]
        figsize   = [6, 9]
        filetype  = None #'pdf'
        filename  = name+'_t_'+str(time)
        #
        normal = {'b0': 1.0e-8, 'n0': 2} # for hedp : b0 in megaGauss & n0 in cm-3
        #
        ## .. load the data for contours
        im1 = field.Field(run = run,
                          data = datax,
                          domain = domain,
                          shifts = shifts)
      
        temp = np.sqrt(im1.data[:,200]**2 + datay[:,200]**2)
        ind_inf = np.argmax(temp[0:201])
        ind_max = np.argmax(temp[201:400])
        d.append(im1.axis[0][201+ind_max] - im1.axis[0][ind_inf])
        t.append(time)

T, D = zip(*sorted(zip(t,d)))
dt = np.diff(T)
dD = np.diff(D)
v  = dD/dt

b, a = signal.butter(4, np.pi*5/150, 'low')
vs = signal.filtfilt(b, a, v)
plt.plot(T[:-1],v,'r')
plt.plot(T[:-1],vs,'--')#, 'k--')
plt.xlabel('Time (norm)',fontsize=26)
plt.ylabel('Expansion Velocity of the B Torus',fontsize=26)
#plt.xlim([0,50.])
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)
#plt.ylim([0,0.3])
plt.grid()
plt.show()

